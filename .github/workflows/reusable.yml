name: Build and Deploy
on: [push]
jobs:
    linter-code-formatter-security-scanner:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: ["3.10"]

        steps:
            - name: Check out repository code
              uses: actions/checkout@v3
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                python-version: ${{ matrix.python-version }}

            - name: Install Poetry
              run: curl -sSL https://install.python-poetry.org | python3 -

            - name: Install the packages using poetry and create a virtual environment
              run: poetry install --sync

            - name: Check if project.toml file and poetry.lock file are in sync
              run: |
                source $(poetry env info --path)/bin/activate
                poetry check

            - name: Code formatter Black
              run: |
                source $(poetry env info --path)/bin/activate
                black --check --diff static_website_builder

            - name: Linting Pylint
              run: |
                source $(poetry env info --path)/bin/activate
                pylint freeze.py
                pylint static_website_builder

            - name: Linting Flake8
              run: |
                source $(poetry env info --path)/bin/activate
                flake8 .

            - name: Linting isort
              run: |
                source $(poetry env info --path)/bin/activate
                isort --check-only .

            - name: Security scanner Bandit
              run: |
                source $(poetry env info --path)/bin/activate
                bandit -r freeze.py
                bandit -r static_website_builder

    upload-to-artifact:
        runs-on: ubuntu-latest
        strategy:
            max-parallel: 3
            matrix:
                python-version: ["3.10"]
        needs: [linter-code-formatter-security-scanner]

        steps:
            - name: Check out repository code
              uses: actions/checkout@v3
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                python-version: ${{ matrix.python-version }}

            - name: Install Poetry
              run: curl -sSL https://install.python-poetry.org | python3 -

            - name: Install the packages using poetry and create a virtual environment
              run: poetry install --sync

            - name: Check if project.toml file and poetry.lock file are in sync
              run: |
                source $(poetry env info --path)/bin/activate
                poetry check

            - name: Freeze flask
              run: |
               source $(poetry env info --path)/bin/activate
               echo "Installing the ONS design system"
                ./get_design_system.sh
                echo "Freezing flask"
                python freeze.py
                zip -r build.zip build

            - name: Upload files
              uses: actions/upload-artifact@v3
              with:
                name: build
                path: build.zip

            - name: Commit changes
              run: |
                source $(poetry env info --path)/bin/activate
                git config --global user.email "no-reply@github.com"
                git config --global user.name "GitHub Actions"
                git add -f build
                git commit -m "Build folder generated"
                git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
                git push
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    commit-to-repo:
        runs-on: ubuntu-latest
        strategy:
            max-parallel: 3
            matrix:
                python-version: ["3.10"]
        needs: [linter-code-formatter-security-scanner]
          
        steps:
            - name: Check out repository code
              uses: actions/checkout@v3
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                python-version: ${{ matrix.python-version }}

            - name: Install Poetry
              run: curl -sSL https://install.python-poetry.org | python3 -

            - name: Install the packages using poetry and create a virtual environment
              run: poetry install --sync

            - name: Check if project.toml file and poetry.lock file are in sync
              run: |
                source $(poetry env info --path)/bin/activate
                poetry check

            - name: Freeze flask
              run: |
                source $(poetry env info --path)/bin/activate
                echo "Installing the ONS design system"
                ./get_design_system.sh
                echo "Freezing flask"
                python freeze.py
                zip -r build.zip build

            - name: Commit changes
              run: |
                source $(poetry env info --path)/bin/activate
                git config --global user.email "no-reply@github.com"
                git config --global user.name "GitHub Actions"
                git add -f build
                git commit -m "Build folder generated"
                git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
                git push
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
